{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template creates the stack for project kretest812. Generated by Sigma",
  "Parameters": {
    "lambdaCodeBucketParameter": {
      "Type": "String",
      "Description": "Name of the S3 bucket containing the Lambda deployment package"
    },
    "lambdaCodeKeyParameter": {
      "Type": "String",
      "Description": "S3 key of the Lambda deployment package"
    },
    "envVarK1Parameter": {
      "Type": "String",
      "Description": "Value of the environment variable: K1, for all Lambdas"
    }
  },
  "Outputs": {
    "apigsachithraAPInamePUT": {
      "Description": "PUT endpoint for resource / on API sachithraAPIname",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            "052p9kjn18",
            ".execute-api.",
            "us-east-1",
            ".amazonaws.com/",
            "Test",
            "/"
          ]
        ]
      }
    },
    "apigTestAPIANY": {
      "Description": "ANY endpoint for resource / on API TestAPI",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            "0itznun7w3",
            ".execute-api.",
            "us-east-1",
            ".amazonaws.com/",
            "socks",
            "/"
          ]
        ]
      }
    },
    "apigHSVendorpromoPOST": {
      "Description": "POST endpoint for resource /promo on API HS Vendor",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            "2owdjvd5i7",
            ".execute-api.",
            "us-east-1",
            ".amazonaws.com/",
            "hotProd",
            "/promo"
          ]
        ]
      }
    },
    "apigXRayAPItestPUT": {
      "Description": "PUT endpoint for resource /test on API XRayAPI",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            "fa31crcvij",
            ".execute-api.",
            "us-east-1",
            ".amazonaws.com/",
            "test",
            "/test"
          ]
        ]
      }
    },
    "apigContactUsAPItestGET": {
      "Description": "GET endpoint for resource /test on API Contact Us API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            "haq1734epj",
            ".execute-api.",
            "us-east-1",
            ".amazonaws.com/",
            "test",
            "/test"
          ]
        ]
      }
    },
    "apigMySampleLambdaAPIkDELETE": {
      "Description": "DELETE endpoint for resource /k on API MySampleLambda-API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            "hpaynv8h4a",
            ".execute-api.",
            "us-east-1",
            ".amazonaws.com/",
            "kk",
            "/k"
          ]
        ]
      }
    },
    "kretest812": {
      "Description": "ARN of Lambda function kretest812",
      "Value": {
        "Fn::GetAtt": [
          "kretest812",
          "Arn"
        ]
      }
    }
  },
  "Resources": {
    "apigsachithraAPInamePUT": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": "052p9kjn18",
        "ResourceId": "zrjp6rdv3b",
        "HttpMethod": "PUT",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${kretest812.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200"
            }
          ]
        }
      }
    },
    "apigTestAPIANY": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": "0itznun7w3",
        "ResourceId": "h2lelj6j7k",
        "HttpMethod": "ANY",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${kretest812.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200"
            }
          ]
        }
      }
    },
    "apigHSVendorpromoPOST": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": "2owdjvd5i7",
        "ResourceId": "3o8456",
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${kretest812.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200"
            }
          ]
        }
      }
    },
    "apigXRayAPItestPUT": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": "fa31crcvij",
        "ResourceId": "ib9oww",
        "HttpMethod": "PUT",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${kretest812.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ]
        }
      }
    },
    "apigXRayAPItestCors": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": "fa31crcvij",
        "ResourceId": "ib9oww",
        "HttpMethod": "OPTIONS",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "apigContactUsAPItestGET": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": "haq1734epj",
        "ResourceId": "9ucvkx",
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${kretest812.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200"
            }
          ]
        }
      }
    },
    "apigMySampleLambdaAPIk": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": "hpaynv8h4a",
        "ParentId": "43wvatqw8d",
        "PathPart": "k"
      }
    },
    "apigMySampleLambdaAPIkDELETE": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": "hpaynv8h4a",
        "ResourceId": {
          "Ref": "apigMySampleLambdaAPIk"
        },
        "HttpMethod": "DELETE",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${kretest812.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200"
            }
          ]
        }
      }
    },
    "kretest812": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "kretest812",
        "Description": "Invokes functions defined in kretest812.js in project kretest812. Generated by Sigma.",
        "Code": {
          "S3Bucket": {
            "Ref": "lambdaCodeBucketParameter"
          },
          "S3Key": {
            "Ref": "lambdaCodeKeyParameter"
          }
        },
        "MemorySize": 128,
        "Handler": "kretest812.handler",
        "Timeout": 60,
        "Runtime": "nodejs10.x",
        "Layers": [],
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Role": {
          "Fn::GetAtt": [
            "kretest812ExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "K1": {
              "Ref": "envVarK1Parameter"
            },
            "K2": "V2",
            "SIGMA_AWS_ACC_ID": {
              "Ref": "AWS::AccountId"
            }
          }
        }
      }
    },
    "kretest812ExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "apigsachithraAPInamePUTPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "kretest812"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/${__Method__}${__Path__}",
            {
              "__Method__": "PUT",
              "__Path__": "/",
              "__ApiId__": "052p9kjn18"
            }
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "apigTestAPIANYPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "kretest812"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/${__Method__}${__Path__}",
            {
              "__Method__": "*",
              "__Path__": "/",
              "__ApiId__": "0itznun7w3"
            }
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "apigHSVendorpromoPOSTPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "kretest812"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/${__Method__}${__Path__}",
            {
              "__Method__": "POST",
              "__Path__": "/promo",
              "__ApiId__": "2owdjvd5i7"
            }
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "apigXRayAPItestPUTPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "kretest812"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/${__Method__}${__Path__}",
            {
              "__Method__": "PUT",
              "__Path__": "/test",
              "__ApiId__": "fa31crcvij"
            }
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "apigContactUsAPItestGETPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "kretest812"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/${__Method__}${__Path__}",
            {
              "__Method__": "GET",
              "__Path__": "/test",
              "__ApiId__": "haq1734epj"
            }
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "apigMySampleLambdaAPIkDELETEPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "kretest812"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/${__Method__}${__Path__}",
            {
              "__Method__": "DELETE",
              "__Path__": "/k",
              "__ApiId__": "hpaynv8h4a"
            }
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "apigsachithraAPInameDeployment1594716612405": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": "052p9kjn18",
        "Description": "An API deployment generated by Sigma for API sachithraAPIname",
        "StageName": "Test"
      },
      "DependsOn": [
        "apigsachithraAPInamePUT"
      ]
    },
    "apigTestAPIDeployment1594716612405": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": "0itznun7w3",
        "Description": "An API deployment generated by Sigma for API TestAPI",
        "StageName": "socks"
      },
      "DependsOn": [
        "apigTestAPIANY"
      ]
    },
    "apigHSVendorDeployment1594716612405": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": "2owdjvd5i7",
        "Description": "An API deployment generated by Sigma for API HS Vendor",
        "StageName": "hotProd"
      },
      "DependsOn": [
        "apigHSVendorpromoPOST"
      ]
    },
    "apigXRayAPIDeployment1594716612405": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": "fa31crcvij",
        "Description": "An API deployment generated by Sigma for API XRayAPI",
        "StageName": "test"
      },
      "DependsOn": [
        "apigXRayAPItestPUT",
        "apigXRayAPItestCors"
      ]
    },
    "apigContactUsAPIDeployment1594716612405": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": "haq1734epj",
        "Description": "An API deployment generated by Sigma for API Contact Us API",
        "StageName": "test"
      },
      "DependsOn": [
        "apigContactUsAPItestGET"
      ]
    },
    "apigMySampleLambdaAPIDeployment1594716612405": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": "hpaynv8h4a",
        "Description": "An API deployment generated by Sigma for API MySampleLambda-API",
        "StageName": "kk"
      },
      "DependsOn": [
        "apigMySampleLambdaAPIkDELETE"
      ]
    }
  }
}